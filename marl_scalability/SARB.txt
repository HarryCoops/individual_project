pybullet build time: Oct  8 2020 00:10:46

  _     ._   __/__   _ _  _  _ _/_   Recorded: 18:13:42  Samples:  15831
 /_//_/// /_\ / //_// / //_'/ //     Duration: 18.717    CPU time: 110.731
/   _/                      v3.4.2

Program: replay_comparison.py

[31m18.717[0m [48;5;24m[38;5;15mmain[0m  [2mreplay_comparison.py:90[0m
â””â”€ [31m18.706[0m f[0m  [2mmemory_profiler.py:715[0m
      [2 frames hidden]  [2mmemory_profiler[0m
         [31m18.666[0m [48;5;24m[38;5;15msingle_agent_sampling_test[0m  [2mreplay_comparison.py:58[0m
         â”œâ”€ [33m10.185[0m [self][0m  [2m[0m
         â”œâ”€ [33m6.387[0m [48;5;24m[38;5;15msample[0m  [2mbaselines/common/image_replay_buffer.py:200[0m
         â”‚  â”œâ”€ [33m5.916[0m __next__[0m  [2mtorch/utils/data/dataloader.py:513[0m
         â”‚  â”‚     [72 frames hidden]  [2mtorch, <built-in>, abc, _collections_abc[0m
         â”‚  â”‚        [32m3.720[0m <listcomp>[0m  [2mtorch/utils/data/_utils/fetch.py:44[0m
         â”‚  â”‚        â””â”€ [32m3.696[0m [48;5;24m[38;5;15m__getitem__[0m  [2mbaselines/common/image_replay_buffer.py:112[0m
         â”‚  â”‚           â”œâ”€ [32m2.022[0m deepcopy[0m  [2mcopy.py:132[0m
         â”‚  â”‚           â”‚     [48 frames hidden]  [2mcopy, <built-in>[0m
         â”‚  â”‚           â””â”€ [32m1.489[0m Tensor.pin_memory[0m  [2m<built-in>:0[0m
         â”‚  â”‚                 [2 frames hidden]  [2m<built-in>[0m
         â”‚  â””â”€ [92m[2m0.448[0m [48;5;24m[38;5;15mmake_state_from_dict[0m  [2mbaselines/common/image_replay_buffer.py:183[0m
         â”‚     â””â”€ [92m[2m0.320[0m _VariableFunctionsClass.cat[0m  [2m<built-in>:0[0m
         â”‚           [2 frames hidden]  [2m<built-in>[0m
         â””â”€ [32m2.014[0m [48;5;24m[38;5;15madd[0m  [2mbaselines/common/image_replay_buffer.py:166[0m
            â””â”€ [32m1.989[0m [48;5;24m[38;5;15madd[0m  [2mbaselines/common/image_replay_buffer.py:67[0m
               â”œâ”€ [32m1.489[0m deepcopy[0m  [2mcopy.py:132[0m
               â”‚     [28 frames hidden]  [2mcopy, <built-in>[0m
               â””â”€ [92m[2m0.260[0m append[0m  [2m<__array_function__ internals>:2[0m
                     [34 frames hidden]  [2m<__array_function__ internals>, numpy...[0m


      single
20  18.70638
Filename: replay_comparison.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    58 9090.457 MiB 9090.457 MiB           1   @profile
    59                                         def single_agent_sampling_test(n_agents, tensors):
    60 9090.457 MiB    0.000 MiB          23       agents = {
    61                                                 f"a_{i}": ImageReplayBuffer(
    62                                                     buffer_size = 500,
    63                                                     batch_size = 32,
    64                                                     device_name="cuda:2",
    65                                                     dimensions=(3, 256, 256)
    66                                                 )  
    67 9090.457 MiB    0.000 MiB          21           for i in range(n_agents)
    68                                             }
    69 12874.848 MiB    0.000 MiB         501       for i in range(500):
    70 12874.848 MiB    1.328 MiB       10500           for j, agent in enumerate(agents):
    71 12874.332 MiB    0.000 MiB       10000               agents[agent].add(
    72                                                         { 
    73 12874.332 MiB    0.000 MiB       10000                       "top_down_rgb": tensors[1000*j + i],
    74 12874.332 MiB   10.402 MiB       10000                       "low_dim_states": np.random.rand(10)
    75                                                         },
    76 12874.332 MiB    4.203 MiB       10000                   np.random.rand(1), 
    77 12874.332 MiB    1.348 MiB       10000                   np.random.rand(1),
    78                                                         { 
    79 12874.332 MiB    0.000 MiB       10000                       "top_down_rgb": tensors[1000*j + i + 500],
    80 12874.332 MiB    3.594 MiB       10000                       "low_dim_states": np.random.rand(10)
    81                                                         },
    82 12874.332 MiB    0.258 MiB       10000                   False,
    83 12874.848 MiB 3763.258 MiB       10000                   np.random.rand(2)
    84                                                     )
    85 12927.195 MiB    0.000 MiB           6       for _ in range(N_SAMPLES):
    86 12927.195 MiB    0.000 MiB         105           for agent in agents:
    87 12927.195 MiB   52.348 MiB         100               agents[agent].sample()
    88 12927.195 MiB    0.000 MiB           1       return 


Filename: replay_comparison.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    90 4528.961 MiB 4528.961 MiB           1   @profile
    91                                         def main():
    92 5362.562 MiB  833.602 MiB           1       torch.cuda.empty_cache()
    93 5362.562 MiB    0.000 MiB           1       times = {}
    94 5362.562 MiB    0.000 MiB           1       process = psutil.Process(os.getpid())
    95 5362.562 MiB    0.000 MiB           1       n_agents = list(range(20, 25, 5))
    96 12926.195 MiB    0.000 MiB           2       for f in ("single",):
    97 5362.562 MiB    0.000 MiB           1           pr = Profiler()
    98 5362.562 MiB    0.000 MiB           1           pr.start()
    99 5362.562 MiB    0.000 MiB           1           _times = []
   100 12926.195 MiB    0.000 MiB           2           for n in n_agents:
   101 5362.562 MiB    0.000 MiB           1               pr.stop()
   102 5362.562 MiB    0.000 MiB           1               torch.cuda.empty_cache()
   103                                                     tensors = [
   104 9090.457 MiB    0.000 MiB       20003                       np.random.randint(
   105                                                                 0, 255, (3, 256, 256), dtype=np.uint8
   106                                                             )
   107 9090.457 MiB 3727.895 MiB       20001                       for _ in range(1000 * n)
   108                                                     ]
   109 9090.457 MiB    0.000 MiB           1               pr.start()
   110 9090.457 MiB    0.000 MiB           1               t = time.time()
   111 9090.457 MiB    0.000 MiB           1               if f == "multi":
   112                                                         multi_agent_sampling_test(n, tensors)
   113                                                     else:
   114 12927.445 MiB 12927.445 MiB           1                   single_agent_sampling_test(n, tensors)
   115 12927.445 MiB    0.000 MiB           1               elapsed = time.time() - t
   116                                                     #t = timeit.timeit(
   117                                                     #    f"{f}_agent_sampling_test({n}, tensors)",
   118                                                     #    setup=f"from __main__ import {f}_agent_sampling_test, tensors",
   119                                                     #    number=1
   120                                                     #)
   121 12927.445 MiB    0.000 MiB           1               _times.append(elapsed)
   122 12926.195 MiB   -1.250 MiB           1               del(tensors)
   123 12926.195 MiB    0.000 MiB           1           times[f] = _times
   124 12926.195 MiB    0.000 MiB           1           pr.stop()
   125 12926.195 MiB    0.000 MiB           1           print(pr.output_text(unicode=True, color=True))
   126                                         
   127 12926.258 MiB    0.062 MiB           1       df = pd.DataFrame(times, index=n_agents)
   128 12926.383 MiB    0.125 MiB           1       test_dir = Path("results", "MARB_testing")
   129 12926.383 MiB    0.000 MiB           1       test_dir.mkdir(exist_ok=True, parents=True)
   130 12926.383 MiB    0.000 MiB           1       df.to_csv(test_dir / "results.csv", index_label="n_agents")
   131 12926.949 MiB    0.566 MiB           1       print(df)


