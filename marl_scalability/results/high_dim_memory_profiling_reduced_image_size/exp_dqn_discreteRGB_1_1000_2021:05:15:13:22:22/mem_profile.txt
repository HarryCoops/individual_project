Filename: marl_scalability/train.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    62    469.5 MiB    469.5 MiB           1       @profile(stream=f)
    63                                             def train(
    64                                                 scenario,
    65                                                 n_agents,
    66                                                 num_episodes,
    67                                                 max_episode_steps,
    68                                                 eval_info,
    69                                                 timestep_sec,
    70                                                 headless,
    71                                                 policy_class,
    72                                                 seed,
    73                                                 log_dir,
    74                                                 experiment_name,
    75                                                 record_vehicle_lifespan,
    76                                                 record_mem_usage,
    77                                                 max_steps
    78                                             ):
    79    469.5 MiB      0.0 MiB           1           torch.set_num_threads(1)
    80    469.5 MiB      0.0 MiB           1           total_step = 0
    81    469.5 MiB      0.0 MiB           1           finished = False
    82                                                 # Make agent_ids in the form of 000, 001, ..., 010, 011, ..., 999, 1000, ...;
    83    469.5 MiB      0.0 MiB           4           agent_ids = ["0" * max(0, 3 - len(str(i))) + str(i) for i in range(n_agents)]
    84                                         
    85                                                 # Assign the agent classes
    86    469.5 MiB      0.0 MiB           4           agent_classes = {
    87                                                     agent_id: policy_class
    88    469.5 MiB      0.0 MiB           2               for agent_id in agent_ids
    89                                                 }
    90                                                 # Create the agent specifications matched with their associated ID.
    91    543.6 MiB      0.0 MiB           4           agent_specs = {
    92                                                     agent_id: make(locator=policy_class, max_episode_steps=max_episode_steps)
    93    543.6 MiB     74.1 MiB           2               for agent_id, policy_class in agent_classes.items()
    94                                                 }
    95                                                 # Create the agents matched with their associated ID.
    96    602.8 MiB      0.0 MiB           4           agents = {
    97                                                     agent_id: agent_spec.build_agent()
    98    602.8 MiB     59.1 MiB           2               for agent_id, agent_spec in agent_specs.items()
    99                                                 }
   100    602.8 MiB      0.0 MiB           1           print(list(agents.values())[0])
   101                                                 # Create the environment.
   102    602.8 MiB      0.0 MiB           1           env = gym.make(
   103    602.8 MiB      0.0 MiB           1               "marl_scalability.env:scalability-v0",
   104    602.8 MiB      0.0 MiB           1               agent_specs=agent_specs,
   105    602.8 MiB      0.0 MiB           1               scenarios=[scenario,],
   106    602.8 MiB      0.0 MiB           1               headless=headless,
   107    602.8 MiB      0.0 MiB           1               timestep_sec=0.1,
   108    683.4 MiB     80.6 MiB           1               seed=seed,
   109                                                 )
   110                                         
   111                                                 # Define an 'etag' for this experiment's data directory based off policy_classes.
   112                                                 # E.g. From a ["marl_scalability.baselines.dqn:dqn-v0", "marl_scalability.baselines.ppo:ppo-v0"]
   113                                                 # policy_classes list, transform it to an etag of "dqn-v0:ppo-v0".
   114                                                 #etag = ":".join([policy_class.split(":")[-1] for policy_class in policy_classes])
   115    683.4 MiB      0.0 MiB           1           surviving_vehicles_total = []
   116    683.4 MiB      0.0 MiB           1           mem_usage = []
   117    683.4 MiB      0.0 MiB           1           mem_usage_interval = 10
   118   1591.1 MiB   -148.1 MiB          56           for episode in episodes(num_episodes, experiment_name=experiment_name, log_dir=log_dir, write_table=True):
   119                                                     # Reset the environment and retrieve the initial observations.
   120   1591.1 MiB   -148.1 MiB          56               surviving_vehicles = []
   121   1591.1 MiB    -66.4 MiB          56               observations = env.reset()
   122   1591.1 MiB   -162.0 MiB          56               dones = {"__all__": False}
   123   1591.1 MiB   -162.0 MiB          56               infos = None
   124   1591.1 MiB   -162.0 MiB          56               episode.reset()
   125   1591.1 MiB   -162.0 MiB          56               experiment_dir = episode.experiment_dir
   126                                                     # Save relevant agent metadata.
   127   1591.1 MiB   -162.0 MiB          56               if not os.path.exists(f"{experiment_dir}/agent_metadata.pkl"):
   128    730.3 MiB      0.0 MiB           1                   if not os.path.exists(experiment_dir):
   129                                                             os.makedirs(experiment_dir)
   130    730.3 MiB      0.0 MiB           1                   with open(f"{experiment_dir}/agent_metadata.pkl", "wb") as metadata_file:
   131    730.3 MiB      0.0 MiB           1                       dill.dump(
   132                                                                 {
   133    730.3 MiB      0.0 MiB           1                               "agent_ids": agent_ids,
   134    730.3 MiB      0.0 MiB           1                               "agent_classes": agent_classes,
   135    730.3 MiB      0.0 MiB           1                               "agent_specs": agent_specs,
   136                                                                 },
   137    730.3 MiB      0.0 MiB           1                           metadata_file,
   138    730.3 MiB      0.0 MiB           1                           pickle.HIGHEST_PROTOCOL,
   139                                                             )
   140                                         
   141   1627.8 MiB -380900.6 MiB       10055               while not dones["__all__"]:
   142                                                         # Break if any of the agent's step counts is 1000000 or greater.
   143   1627.8 MiB -1522814.3 MiB       40000                   if any([episode.get_itr(agent_id) >= 1000000 for agent_id in agents]):
   144                                                             finished = True
   145                                                             break
   146                                         
   147                                                         # Perform the evaluation check.
   148                                                         '''
   149                                                         evaluation_check(
   150                                                             agents=agents,
   151                                                             agent_ids=agent_ids,
   152                                                             policy_classes=agent_classes,
   153                                                             episode=episode,
   154                                                             log_dir=log_dir,
   155                                                             max_episode_steps=max_episode_steps,
   156                                                             **eval_info,
   157                                                             **env.info,
   158                                                         )
   159                                                         '''
   160                                         
   161                                                         # Request and perform actions on each agent that received an observation.
   162   1627.8 MiB -1522812.9 MiB       40000                   actions = {
   163                                                             agent_id: agents[agent_id].act(observation, explore=True)
   164   1627.8 MiB -761403.8 MiB       20000                       for agent_id, observation in observations.items()
   165                                                         }
   166   1627.8 MiB -380796.4 MiB       10000                   next_observations, rewards, dones, infos = env.step(actions)
   167                                                         # Active agents are those that receive observations in this step and the next
   168                                                         # step. Step each active agent (obtaining their network loss if applicable).
   169   1627.8 MiB -380798.7 MiB       10000                   active_agent_ids = observations.keys() & next_observations.keys()
   170   1627.8 MiB -380798.7 MiB       10000                   surviving_vehicles.append(len(active_agent_ids))
   171   1627.8 MiB -1522582.7 MiB       40000                   loss_outputs = {
   172                                                             agent_id: agents[agent_id].step(
   173                                                                 state=observations[agent_id],
   174                                                                 action=actions[agent_id],
   175                                                                 reward=rewards[agent_id],
   176                                                                 next_state=next_observations[agent_id],
   177                                                                 done=dones[agent_id],
   178                                                                 info=infos[agent_id],
   179                                                             )
   180   1627.8 MiB -759478.5 MiB       20000                       for agent_id in active_agent_ids
   181                                                         }
   182                                         
   183                                                         # Record the data from this episode.
   184   1627.8 MiB -380186.5 MiB       10000                   episode.record_step(
   185   1627.8 MiB -380186.5 MiB       10000                       agent_ids_to_record=active_agent_ids,
   186   1627.8 MiB -380186.5 MiB       10000                       infos=infos,
   187   1627.8 MiB -380186.5 MiB       10000                       rewards=rewards,
   188   1627.8 MiB -380186.5 MiB       10000                       total_step=total_step,
   189   1627.8 MiB -380186.5 MiB       10000                       loss_outputs=loss_outputs,
   190                                                         )
   191                                                         # Update variables for the next step.
   192   1627.8 MiB -380186.5 MiB       10000                   total_step += 1
   193   1627.8 MiB -380778.2 MiB       10000                   observations = next_observations
   194                                                         """
   195                                                         if len(list(agents.values())[0].replay) == 100:
   196                                                             
   197                                                             import sys 
   198                                                             from pympler import asizeof
   199                                                             replay = list(agents.values())[0].replay
   200                                                             print(sys.getsizeof(replay))
   201                                                             print(asizeof.asizeof(replay))
   202                                                             first_state = replay._get_raw(0)[0]["top_down_rgb"]
   203                                                             print(asizeof.asizeof(first_state))
   204                                                             print(sys.getsizeof(first_state))
   205                                                             1/0
   206                                                             print(asizeof.asized(replay, detail=4).format())
   207                                                             """
   208   1627.8 MiB -380778.2 MiB       10000                   if total_step % mem_usage_interval == 0:
   209   1611.6 MiB -38090.1 MiB        1000                       process = psutil.Process(os.getpid())
   210   1611.6 MiB -24306.4 MiB        1000                       mem_usage.append((total_step, process.memory_info().rss))
   211   1627.8 MiB -366994.3 MiB       10000                   if max_steps and total_step >= max_steps:
   212   1588.2 MiB    -39.6 MiB           1                       finished = True
   213   1588.2 MiB      0.0 MiB           1                       break
   214                                         
   215                                                     # Normalize the data and record this episode on tensorboard.
   216   1591.1 MiB  -2305.9 MiB          56               episode.record_episode()
   217   1591.1 MiB   -150.8 MiB          56               episode.record_tensorboard()
   218   1591.1 MiB   -151.0 MiB          56               surviving_vehicles += [0,] * (max_episode_steps - len(surviving_vehicles))
   219   1591.1 MiB   -151.0 MiB          56               surviving_vehicles_total.append(surviving_vehicles)
   220   1591.1 MiB   -151.0 MiB          56               if finished:
   221   1588.5 MiB     -2.6 MiB           1                   break
   222   1588.5 MiB      0.0 MiB           1           if record_vehicle_lifespan:
   223                                                     with open(Path(log_dir) / experiment_name / "surviving_vehicle_data.csv", "w") as f:
   224                                                         writer = csv.writer(f)
   225                                                         writer.writerows(surviving_vehicles_total)
   226   1588.5 MiB      0.0 MiB           1           if record_mem_usage:
   227   1588.5 MiB      0.0 MiB           1               mem_usage, steps = zip(*mem_usage)
   228   1588.7 MiB      0.2 MiB           1               mem_usage = pd.DataFrame({"mem_usage": pd.Series(mem_usage), "step": pd.Series(steps)})
   229   1588.7 MiB      0.0 MiB           1               mem_usage.to_csv(Path(log_dir) / experiment_name / "mem_usage.csv")
   230   1570.8 MiB    -17.9 MiB           1           env.close()


